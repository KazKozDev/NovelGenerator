/**
 * Professional Polish Agent - Final pass focused on making text read like a professional novel
 * This is the last editing step before compilation
 */

import { generateGeminiText } from '../services/geminiService';
import { ChapterData, AgentLogEntry } from '../types';

export interface ProfessionalPolishResult {
  polishedChapters: ChapterData[];
  totalChanges: number;
}

/**
 * Applies professional polish to all chapters
 * Focuses on rhythm, subtext, motivation, variety, emotional anchors, and perception layers
 */
export async function applyProfessionalPolish(
  chapters: ChapterData[],
  onProgress?: (current: number, total: number) => void,
  onLog?: (entry: AgentLogEntry) => void
): Promise<ProfessionalPolishResult> {
  
  const polishedChapters: ChapterData[] = [];
  let totalChanges = 0;
  
  console.log('‚ú® Starting professional polish pass...');
  
  for (let i = 0; i < chapters.length; i++) {
    const chapter = chapters[i];
    const chapterNum = i + 1;
    
    if (onProgress) {
      onProgress(chapterNum, chapters.length);
    }
    
    console.log(`\n‚ú® Professional polish: Chapter ${chapterNum}/${chapters.length}`);
    
    // Log start
    if (onLog) {
      onLog({
        timestamp: Date.now(),
        chapterNumber: chapterNum,
        type: 'execution',
        message: `Applying professional polish to Chapter ${chapterNum}`,
        details: { phase: 'professional-polish' }
      });
    }
    
    const originalContent = chapter.content;
    
    // Apply professional polish
    const polishedContent = await polishChapterProfessionally(
      originalContent,
      chapterNum,
      chapters.length
    );
    
    // Check if changes were made
    const hasChanges = polishedContent !== originalContent;
    
    if (hasChanges) {
      totalChanges++;
      
      // Log diff
      if (onLog) {
        onLog({
          timestamp: Date.now(),
          chapterNumber: chapterNum,
          type: 'diff',
          message: `Professional polish applied to Chapter ${chapterNum}`,
          beforeText: originalContent,
          afterText: polishedContent,
          strategy: 'professional-polish'
        });
      }
    }
    
    const polishedChapter: ChapterData = {
      ...chapter,
      content: polishedContent
    };
    
    polishedChapters.push(polishedChapter);
    
    console.log(`‚úÖ Chapter ${chapterNum} professionally polished ${hasChanges ? '(changes applied)' : '(no changes needed)'}`);
  }
  
  console.log(`\nüéâ Professional polish complete! ${totalChanges} chapters modified.`);
  
  return {
    polishedChapters,
    totalChanges
  };
}

/**
 * Applies professional-level polish to a single chapter
 */
async function polishChapterProfessionally(
  content: string,
  chapterNumber: number,
  totalChapters: number
): Promise<string> {
  
  const polishPrompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä-—Å—Ç–∏–ª–∏—Å—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–∑—è—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –∏ –æ—Ç—à–ª–∏—Ñ–æ–≤–∞—Ç—å –µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω —á–∏—Ç–∞–ª—Å—è –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–º–∞–Ω.

**–ì–õ–ê–í–ê ${chapterNumber} –∏–∑ ${totalChapters}:**

${content}

---

**–¢–í–û–ò –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –®–õ–ò–§–û–í–ö–ï:**

**1. –¢–ï–ú–ü –ò –†–ò–¢–ú**
- –†–∞–∑–±–∏–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã (–±–æ–ª—å—à–µ 5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
- –ß–µ—Ä–µ–¥—É–π –æ–ø–∏—Å–∞–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —É–¥–∞—Ä–∞–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –í–∞—Ä—å–∏—Ä—É–π –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∏—Ç–º–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã –¥–ª—è –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤

**2. –î–ò–ê–õ–û–ì–ò –° –ü–û–î–¢–ï–ö–°–¢–û–ú**
- –ò–∑–±–∞–≤–ª—è–π—Å—è –æ—Ç –ø—Ä—è–º—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
- –î–æ–±–∞–≤–ª—è–π –ø–∞—É–∑—ã, –∂–µ—Å—Ç—ã, –Ω–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–æ—Å—Ç—å
- –ü—É—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Ä–µ–¥–∫–æ –≥–æ–≤–æ—Ä—è—Ç –≤—Å—ë –ø—Ä—è–º–æ
- –ü–æ–∫–∞–∑—ã–≤–∞–π –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω–æ–µ: –≤–∑–≥–ª—è–¥—ã, –º–æ–ª—á–∞–Ω–∏–µ, —Ç–æ–Ω
- –£–±–∏—Ä–∞–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ ("–ö–∞–∫ —Ç—ã –∑–Ω–∞–µ—à—å, –ë–æ–±...")

**3. –ú–û–¢–ò–í–ê–¶–ò–Ø –ò –°–û–ú–ù–ï–ù–ò–Ø**
- –í –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –≤—Å—Ç–∞–≤–ª—è–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –±–æ—Ä—å–±—É
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Å–æ–º–Ω–µ–Ω–∏—è, –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º
- –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫ –¥–µ–π—Å—Ç–≤–∏—é ‚Äî –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂—É –ø–æ–¥—É–º–∞—Ç—å
- –ü–æ–∫–∞–∂–∏ —Ü–µ–Ω—É —Ä–µ—à–µ–Ω–∏—è –î–û —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ

**4. –ê–ù–¢–ò-–ü–û–í–¢–û–†**
- –£–±–∏—Ä–∞–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∞–±–∑–∞—Ü–∞—Ö
- –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ–Ω—è—Ç–∏–π (–º—Ä–∞–∫, —Ç—å–º–∞, –æ–≥–æ–Ω—å, —Å—Ç—Ä–∞—Ö) –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
- –í–∞—Ä—å–∏—Ä—É–π —Å–∏–Ω–æ–Ω–∏–º—ã
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥

**5. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –Ø–ö–û–†–Ø**
- –í –∫–∞–∂–¥–æ–π –≤–∞–∂–Ω–æ–π —Å—Ü–µ–Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –º–∞–ª–µ–Ω—å–∫–∏–π "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç"
- –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∑–∞–ø–∞—Ö, –∂–µ—Å—Ç, –¥–µ—Ç–∞–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑—ã–≤–∞–µ—Ç —á–∏—Ç–∞—Ç–µ–ª—è —Å –≥–µ—Ä–æ–µ–º
- –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –Ω–µ —Ç–æ–ª—å–∫–æ –∑—Ä–µ–Ω–∏–µ, –Ω–æ –∏ –∑–≤—É–∫, –∑–∞–ø–∞—Ö, –æ—Å—è–∑–∞–Ω–∏–µ
- –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—Ä–∞–∑ –ª—É—á—à–µ —Ç—Ä—ë—Ö –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö

**6. –°–õ–û–ò –í–û–°–ü–†–ò–Ø–¢–ò–Ø**
- –ü–æ–∫–∞–∑—ã–≤–∞–π —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–∏–¥–∏—Ç –∏ –∫–∞–∫ –æ–Ω —ç—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç
- –õ—ë–≥–∫–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ —Å–∞–º–æ–æ–±–º–∞–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
- –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è: –æ–¥–∏–Ω –≤–∏–¥–∏—Ç —É–≥—Ä–æ–∑—É, –¥—Ä—É–≥–æ–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è–º

**7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –®–õ–ò–§–û–í–ö–ê**
- –ü–æ–¥–±–∏—Ä–∞–π –±–æ–ª–µ–µ –±–æ–≥–∞—Ç—É—é –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ª–µ–∫—Å–∏–∫—É
- –ò–∑–±–µ–≥–∞–π –∫–ª–∏—à–µ –∏ –∏–∑–±–∏—Ç—ã—Ö —Ñ—Ä–∞–∑
- –°–æ—Ö—Ä–∞–Ω—è–π –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –≥–ª–∞–≤—ã
- –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–ª–∞–≤–Ω—ã–º, –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Å—Ç—ã–∫–æ–≤ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏
- –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –ª–æ–≥–∏—á–Ω—ã

**–í–ê–ñ–ù–û:**
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Å—é–∂–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏
- –ù–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª —Å—Ü–µ–Ω
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Å—Ü–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ö–ê–ß–ï–°–¢–í–ï –ü–û–î–ê–ß–ò, –∞ –Ω–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
- –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —à–ª–∏—Ñ–æ–≤–∫–∞, –∞ –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ

**–í–ï–†–ù–ò:**
–û—Ç—à–ª–∏—Ñ–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≥–ª–∞–≤—ã. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;

  const systemPrompt = `–¢—ã –º–∞—Å—Ç–µ—Ä-—Ä–µ–¥–∞–∫—Ç–æ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —à–ª–∏—Ñ–æ–≤–∫–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–º–∞–Ω —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç—É —Å —Ä–∏—Ç–º–æ–º, –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —è–∫–æ—Ä—è–º–∏ –∏ —Å–ª–æ—è–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;

  try {
    const polished = await generateGeminiText(
      polishPrompt,
      systemPrompt,
      undefined,
      0.7, // Higher temperature for creative polish
      0.9,
      40
    );
    
    // Validation: polished text should be similar length (within 40%)
    const lengthRatio = polished.length / content.length;
    if (lengthRatio < 0.6 || lengthRatio > 1.4) {
      console.warn(`Professional polish changed length significantly (${lengthRatio.toFixed(2)}x) for chapter ${chapterNumber}. Using original.`);
      return content;
    }
    
    return polished;
  } catch (e) {
    console.warn(`Professional polish failed for chapter ${chapterNumber}:`, e);
    return content;
  }
}
